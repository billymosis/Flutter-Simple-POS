CREATE TABLE IF NOT EXISTS products (
  id TEXT NOT NULL, 
  product_name TEXT NOT NULL, 
  category TEXT NOT NULL, 
  uom TEXT NOT NULL, 
  price INTEGER NOT NULL, 
  created_at INTEGER(4) NOT NULL DEFAULT (strftime('%s','now')),
  updated_at INTEGER(4) NOT NULL DEFAULT (strftime('%s','now')),
  PRIMARY KEY (id)
);


CREATE TABLE IF NOT EXISTS products_in_transactions (
  product_id TEXT NOT NULL REFERENCES products (id), 
  transaction_id INTEGER NOT NULL REFERENCES sales_transactions (transaction_id), 
  quantity REAL NOT NULL, 
  sale_price REAL NOT NULL, 
  PRIMARY KEY (product_id, transaction_id)
);

CREATE TABLE IF NOT EXISTS sales_transactions (
  transaction_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, 
  customer TEXT NOT NULL, 
  total_price REAL NOT NULL, 
  payment REAL NOT NULL, 
  payment_status INTEGER NOT NULL CHECK (
    payment_status IN (0, 1)
  ), 
  created_at INTEGER(4) NOT NULL DEFAULT (strftime('%s','now')),
  updated_at INTEGER(4) NOT NULL DEFAULT (strftime('%s','now')),
  note TEXT NOT NULL
);


CREATE TRIGGER updated_at_trigger 
AFTER UPDATE
ON products
FOR EACH ROW
WHEN NEW.updated_at = OLD.updated_at
	BEGIN
		UPDATE products SET updated_at = (strftime('%s','now'))
	WHERE id == OLD.id;
END;

CREATE TRIGGER updated_at_sales_transactions
AFTER UPDATE
ON sales_transactions
FOR EACH ROW
WHEN NEW.updated_at = OLD.updated_at
	BEGIN
		UPDATE sales_transactions SET updated_at = (strftime('%s','now'))
	WHERE transaction_id == OLD.transaction_id;
END;
